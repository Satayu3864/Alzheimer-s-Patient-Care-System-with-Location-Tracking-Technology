#include <WiFi.h>
#include <FirebaseESP32.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <TimeLib.h>
#include <ctime>
#include <ESPmDNS.h>
#include <ArduinoOTA.h>

#define WIFI_SSID "Miixoji"
#define WIFI_PASSWORD "14012014"
//#define WIFI_SSID "Maplee"
//#define WIFI_PASSWORD "Satayu95559"
#define FIREBASE_HOST "https://testcode-ec713-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "AIzaSyBinULhaoZsGBJ1BRyg3yxm0kUR9b5Y3wA"

FirebaseData firebaseData;
FirebaseConfig firebaseConfig;
FirebaseAuth firebaseAuth;
TinyGPSPlus gps;
HardwareSerial gpsSerial(1);

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 25200, 60000);

const char* deviceIDs[] = {"icE1FNvXIIOVSxwG9si03rYaXXE2"};
const int deviceCount = sizeof(deviceIDs) / sizeof(deviceIDs[0]);

void setup() {
    Serial.begin(115200);
    gpsSerial.begin(9600, SERIAL_8N1, 18, 19);

    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("Connected!");

    timeClient.begin();

    firebaseConfig.host = FIREBASE_HOST;
    firebaseConfig.signer.tokens.legacy_token = FIREBASE_AUTH;

    Firebase.begin(&firebaseConfig, &firebaseAuth);
    Firebase.reconnectWiFi(true);

    // ส่วนของ OTA
    ArduinoOTA.setHostname("myesp32"); // ตั้งชื่อให้อุปกรณ์ (ไม่จำเป็น)
    // ArduinoOTA.setPassword("admin"); // ตั้งรหัสผ่าน (ไม่จำเป็น)

    ArduinoOTA.onStart([]() {
        Serial.println("Start updating");
    });
    ArduinoOTA.onEnd([]() {
        Serial.println("\nEnd");
    });
    ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
        Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    });
    ArduinoOTA.onError([](ota_error_t error) {
        Serial.printf("Error[%u]: ", error);
        if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
        else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
        else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed"); // Corrected typo here
        else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
        else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });
    ArduinoOTA.begin();

    Serial.println("Ready for OTA updates");
}

void loop() {
    ArduinoOTA.handle(); // ต้องใส่ใน loop()

    timeClient.update();
    time_t rawTime = timeClient.getEpochTime();
    struct tm *timeInfo = localtime(&rawTime);
    
    char formattedDate[20];
    strftime(formattedDate, sizeof(formattedDate), "%d-%m-%Y", timeInfo);

    String formattedTime = timeClient.getFormattedTime();
    String fullTimestamp = String(formattedDate) + " " + formattedTime;

    while (gpsSerial.available() > 0) {
        gps.encode(gpsSerial.read());
    }

    if (gps.location.isValid()) {
        float latitude = gps.location.lat();
        float longitude = gps.location.lng();

        for (int i = 0; i < deviceCount; i++) {
            const char* deviceID = deviceIDs[i];

            Serial.printf("%s -> Latitude: %f, Longitude: %f\n", deviceID, latitude, longitude);

            if (Firebase.ready()) {
                String path = "/locations/" + String(deviceID);  // ใช้ deviceID เป็น path
                FirebaseJson jsonData;

                jsonData.set("latitude", latitude);
                jsonData.set("longitude", longitude);
                jsonData.set("timestamp", fullTimestamp);

                // ใช้ set() แทน pushJSON() เพื่อเขียนข้อมูลในตำแหน่งที่เฉพาะเจาะจง
                if (Firebase.setJSON(firebaseData, path, jsonData)) {
                    Serial.printf("Location for %s sent to Firebase!\n", deviceID);
                } else {
                    Serial.printf("Failed to send data for %s. Error: %s\n", deviceID, firebaseData.errorReason().c_str());
                }
            }
        }
    } else {
        Serial.println("Waiting for GPS signal...");
    }

}